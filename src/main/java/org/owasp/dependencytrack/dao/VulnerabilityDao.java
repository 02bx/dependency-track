/*
 * This file is part of Dependency-Track.
 *
 * Dependency-Track is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * Dependency-Track is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Dependency-Track. If not, see http://www.gnu.org/licenses/.
 *
 * Copyright (c) Axway. All Rights Reserved.
 */

package org.owasp.dependencytrack.dao;

import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.owasp.dependencytrack.model.ApplicationDependency;
import org.owasp.dependencytrack.model.ApplicationVersion;
import org.owasp.dependencytrack.model.LibraryVersion;
import org.owasp.dependencytrack.model.ScanResults;
import org.owasp.dependencytrack.model.Vulnerability;
import org.owasp.dependencytrack.model.VulnerableComponent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.List;

@Repository
public class VulnerabilityDao {

    /**
     * Setup logger
     */
    private static final Logger LOGGER = LoggerFactory.getLogger(VulnerabilityDao.class);

    /**
     * The Hibernate SessionFactory
     */
    @Autowired
    private SessionFactory sessionFactory;

    /**
     * Returns a list of Vulnerability objects for LibraryVersions
     * that have a dependency of the specified ApplicationVersion.
     *
     * @param applicationVersion The ApplicationVersion to retrieve vulnerability for
     * @return a List of Vulnerability objects
     */
    @SuppressWarnings("unchecked")
    public List<VulnerableComponent> getVulnerableComponents(ApplicationVersion applicationVersion) {
        final Query query = sessionFactory.getCurrentSession().
                createQuery("from ApplicationDependency where applicationVersion=:version");
        query.setParameter("version", applicationVersion);

        List<VulnerableComponent> vulnerableComponents = new ArrayList<>();

        // Retrieve all of the library versions from the specified application version
        final List<LibraryVersion> libvers = new ArrayList<>();
        final List<ApplicationDependency> deps = query.list();
        for (ApplicationDependency dep : deps) {
            libvers.add(dep.getLibraryVersion());
        }

        // Iterate through the library versions looking for scan results
        for (LibraryVersion libraryVersion: libvers) {
            final Query scanQuery = sessionFactory.getCurrentSession().createQuery("from ScanResults where libraryVersion=:version");
            scanQuery.setParameter("version", libraryVersion);
            List<ScanResults> scanResults = scanQuery.list();

            // Iterate through the scans looking for vulnerabilities
            for (ScanResults scanResult: scanResults) {
                final Query vulnQuery = sessionFactory.getCurrentSession().createQuery("from Vulnerability where scanResults=:scanResult order by cvss, cve asc");
                vulnQuery.setParameter("scanResult", scanResult);
                List<Vulnerability> vulns = vulnQuery.list();

                // Create a new VulnerableComponent
                VulnerableComponent vulnerableComponent = new VulnerableComponent();
                vulnerableComponent.setLibraryVersion(libraryVersion);
                vulnerableComponent.setScanResults(scanResult);
                vulnerableComponent.setVulnerabilities(vulns);

                // Add the VulnerableComponent to the list of vulnerableComponents to return
                vulnerableComponents.add(vulnerableComponent);
            }
        }
        return vulnerableComponents;
    }
}
