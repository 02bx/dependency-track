/*
 * This file is part of Dependency-Track.
 *
 * Dependency-Track is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * Dependency-Track is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Dependency-Track. If not, see http://www.gnu.org/licenses/.
 */
package org.owasp.dependencytrack.model;

import alpine.validation.RegexSequence;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.Extension;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.Index;
import javax.jdo.annotations.Order;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.PrimaryKey;
import javax.jdo.annotations.Unique;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.List;

@PersistenceCapable
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Vulnerability implements Serializable {

    private static final long serialVersionUID = -3002699553847728904L;

    @PrimaryKey
    @Persistent(valueStrategy = IdGeneratorStrategy.NATIVE)
    @JsonIgnore
    private long id;

    @Persistent
    @Column(name = "NAME", allowsNull = "false")
    @Index(name = "VULNERABILITY_NAME_IDX")
    @NotNull
    @Size(min = 1, max = 255)
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS, message = "The name may only contain printable characters")
    private String name;

    @Persistent
    @Column(name = "DESCRIPTION", jdbcType = "CLOB")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The description may only contain printable characters")
    private String description;

    @Persistent(defaultFetchGroup = "true")
    @Column(name = "CWE")
    @Index(name = "VULNERABILITY_CWE_IDX")
    private Cwe cwe;

    @Persistent
    @Column(name = "CVSSV2SCORE", jdbcType = "DECIMAL", scale = 1)
    private BigDecimal cvssV2Score;

    @Persistent
    @Column(name = "CVSSV2VECTOR")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The CVSSv2 Vector may only contain printable characters")
    private String cvssV2Vector;

    @Persistent
    @Column(name = "CVSSV3SCORE", jdbcType = "DECIMAL", scale = 1)
    private BigDecimal cvssV3Score;

    @Persistent
    @Column(name = "CVSSV3VECTOR")
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS_PLUS, message = "The CVSSv3 Vector may only contain printable characters")
    private String cvssV3Vector;

    @Persistent
    @Column(name = "MATCHEDCPE")
    @Size(max = 255)
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS, message = "The matchedCPE may only contain printable characters")
    private String matchedCPE;

    @Persistent
    @Column(name = "MATCHEDALLPREVIOUSCPE")
    @Size(max = 255)
    @Pattern(regexp = RegexSequence.Definition.PRINTABLE_CHARS, message = "The matchedAllPreviousCPE may only contain printable characters")
    private String matchedAllPreviousCPE;

    @Persistent
    @Order(extensions = @Extension(vendorName = "datanucleus", key = "list-ordering", value = "id ASC"))
    private List<Component> components;

    @Persistent
    @Unique(name = "VULNERABILITY_UUID_IDX")
    @Column(name = "UUID", jdbcType = "VARCHAR", length = 36, allowsNull = "false")
    @NotNull
    @Pattern(regexp = RegexSequence.Definition.UUID, message = "The uuid must be a valid 36 character UUID")
    private String uuid;

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /**
     * Returns the severity based on the numerical CVSS score. CVSSv2 and CVSSv3 have
     * slightly different ranges with CVSSv3 introducing critical severity whereas
     * CVSSv2 only has high, medium, and low.
     *
     * This method properly accounts for vulnerabilities that may have only a CVSSv2
     * score. If both scores are available, it will return the CVSSv3 severity.
     * @return the severity of the vulnerability
     */
    public Severity getSeverity() {
        final double dv = cvssV2Score.doubleValue();
        if (dv >= 9 && (cvssV3Score.floatValue() > 0 && cvssV3Vector != null)) {
            return Severity.CRITICAL;
        } else if (dv >= 7) {
            return Severity.HIGH;
        } else if (dv >= 4) {
            return Severity.MEDIUM;
        } else if (dv > 0) {
            return Severity.LOW;
        } else {
            return Severity.INFO;
        }
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Cwe getCwe() {
        return cwe;
    }

    public void setCwe(Cwe cwe) {
        this.cwe = cwe;
    }

    public BigDecimal getCvssV2Score() {
        return cvssV2Score;
    }

    public void setCvssV2Score(BigDecimal cvssV2Score) {
        this.cvssV2Score = cvssV2Score;
    }

    public String getCvssV2Vector() {
        return cvssV2Vector;
    }

    public void setCvssV2Vector(String cvssV2Vector) {
        this.cvssV2Vector = cvssV2Vector;
    }

    public BigDecimal getCvssV3Score() {
        return cvssV3Score;
    }

    public void setCvssV3Score(BigDecimal cvssV3Score) {
        this.cvssV3Score = cvssV3Score;
    }

    public String getCvssV3Vector() {
        return cvssV3Vector;
    }

    public void setCvssV3Vector(String cvssV3Vector) {
        this.cvssV3Vector = cvssV3Vector;
    }

    public String getMatchedCPE() {
        return matchedCPE;
    }

    public void setMatchedCPE(String matchedCPE) {
        this.matchedCPE = matchedCPE;
    }

    public String getMatchedAllPreviousCPE() {
        return matchedAllPreviousCPE;
    }

    public void setMatchedAllPreviousCPE(String matchedAllPreviousCPE) {
        this.matchedAllPreviousCPE = matchedAllPreviousCPE;
    }

    public List<Component> getComponents() {
        return components;
    }

    public void setComponents(List<Component> components) {
        this.components = components;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

}
