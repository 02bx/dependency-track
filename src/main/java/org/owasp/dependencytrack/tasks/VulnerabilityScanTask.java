/*
 * This file is part of Dependency-Track.
 *
 * Dependency-Track is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * Dependency-Track is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Dependency-Track. If not, see http://www.gnu.org/licenses/.
 */
package org.owasp.dependencytrack.tasks;

import org.owasp.dependencytrack.service.VulnerabilityService;
import org.owasp.dependencytrack.service.VulnerabilityServiceImpl;
import org.owasp.dependencytrack.tasks.dependencycheck.DependencyCheckAnalysis;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationListener;
import org.springframework.transaction.annotation.Transactional;

import java.util.concurrent.atomic.AtomicBoolean;

/**
 * A Spring task to execute a Dependency-Check scan every 24 hours.
 *
 * @author Steve Springett (steve.springett@owasp.org)
 */
public class VulnerabilityScanTask  implements ApplicationListener<VulnerabilityScanRequestedEvent>{

    /**
     * Setup logger
     */
    private static final Logger LOGGER = LoggerFactory.getLogger(VulnerabilityScanTask.class);

    /**
     * The Dependency-Track Vulnerability Service
     */
    @Autowired
    private VulnerabilityService vulnerabilityService;

    @Autowired
    private DependencyCheckAnalysis dependencyCheckAnalysis;

    AtomicBoolean inProgress = new AtomicBoolean(false);


      /**
      /**     * Executes a Dependency-Check scan against all defined LibraryVersions.
     */
    @Transactional
    public void doUpdates() {
        if(!inProgress.get()) {
            try{
                inProgress.set(true);
                LOGGER.info("Starting Dependency-Check scheduled analysis");
                dependencyCheckAnalysis.execute();
                vulnerabilityService.updateLibraryVersionVulnerabilityCount();
                vulnerabilityService.updateApplicationVersionVulnerabilityCount();
            }finally {
                inProgress.set(false);
            }
        }
    }

    public void setDependencyCheckAnalysis(DependencyCheckAnalysis dependencyCheckAnalysis) {
        this.dependencyCheckAnalysis = dependencyCheckAnalysis;
    }

    public void setVulerabilityService(VulnerabilityServiceImpl vulerabilityService) {
        this.vulnerabilityService = vulerabilityService;
    }

    @Override
    public void onApplicationEvent(VulnerabilityScanRequestedEvent event) {
        doUpdates();
    }
}
