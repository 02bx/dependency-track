/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Copyright (c) Steve Springett. All Rights Reserved.
 */
package org.dependencytrack.tasks;

import alpine.event.framework.Subscriber;
import alpine.logging.Logger;
import org.dependencytrack.event.VulnerabilityManagementUploadEvent;
import org.dependencytrack.integrations.FindingUploader;
import org.dependencytrack.model.Finding;
import org.dependencytrack.model.Project;
import org.dependencytrack.persistence.QueryManager;
import java.util.List;

public abstract class VulnerabilityManagementUploadTask implements Subscriber {

    private static final Logger LOGGER = Logger.getLogger(VulnerabilityManagementUploadTask.class);

    protected void inform(VulnerabilityManagementUploadEvent event, FindingUploader findingsUploader) {
        try (QueryManager qm = new QueryManager()) {
            findingsUploader.setQueryManager(qm);
            if (findingsUploader.isEnabled()) {
                if (event.getType() == VulnerabilityManagementUploadEvent.Type.PORTFOLIO) {
                    for (Project project : qm.getAllProjects()) {
                        processProject(findingsUploader, qm, project);
                    }
                } else if (event.getType() == VulnerabilityManagementUploadEvent.Type.PROJECT) {
                    Project project = qm.getObjectByUuid(Project.class, event.getProjectUuid());
                    processProject(findingsUploader, qm, project);
                }
                findingsUploader.complete();
            }
        } catch (Exception ex) {
            LOGGER.error(ex.getMessage());
        }
    }

    private void processProject(FindingUploader findingsUploader, QueryManager qm, Project project) {
        if (findingsUploader.isProjectConfigured(project)) {
            LOGGER.debug("Initializing integration point: " + findingsUploader.name() + " for project: " + project.getUuid());
            final List<Finding> findings = qm.getFindings(project);
            final Object payload = findingsUploader.process(project, findings);
            LOGGER.debug("Uploading findings to " + findingsUploader.name() + " for project: " + project.getUuid());
            findingsUploader.upload(project, payload);
        }
    }
}
