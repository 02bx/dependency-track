/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Copyright (c) Steve Springett. All Rights Reserved.
 */
package org.dependencytrack.tasks;

import alpine.event.framework.Subscriber;
import alpine.logging.Logger;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.dependencytrack.event.VulnerabilityManagementUploadEvent;
import org.dependencytrack.integrations.FindingsUploader;
import org.dependencytrack.model.Finding;
import org.dependencytrack.model.Project;
import org.dependencytrack.persistence.QueryManager;
import java.io.ByteArrayInputStream;
import java.util.List;

public abstract class VulnerabilityManagementUploadTask implements Subscriber {

    private static final Logger LOGGER = Logger.getLogger(VulnerabilityManagementUploadTask.class);

    protected void inform(VulnerabilityManagementUploadEvent event, FindingsUploader findingsUploader) {
        try (QueryManager qm = new QueryManager()) {
            if (event.getType() == VulnerabilityManagementUploadEvent.Type.PORTFOLIO) {
                for (Project project : qm.getAllProjects()) {
                    processProject(findingsUploader, qm, project);
                }
            } else if (event.getType() == VulnerabilityManagementUploadEvent.Type.PROJECT) {
                processProject(findingsUploader, qm, event.getProject());
            }
        } catch (Exception ex) {
            LOGGER.error(ex.getMessage());
        }
    }

    private void processProject(FindingsUploader findingsUploader, QueryManager qm, Project project)
            throws JsonProcessingException {
        if (findingsUploader.isEnabled() && findingsUploader.isProjectConfigured(project.getUuid())) {
            final List<Finding> findings = qm.getFindings(project);
            final ObjectMapper mapper = new ObjectMapper();
            final ByteArrayInputStream in = new ByteArrayInputStream(mapper.writeValueAsBytes(findings));
            findingsUploader.upload(project.getUuid(), in);
        }
    }
}
