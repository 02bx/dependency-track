/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) Steve Springett. All Rights Reserved.
 */
package org.dependencytrack.resources.v1;

import alpine.filters.AuthenticationFilter;
import alpine.util.UuidUtil;
import org.dependencytrack.ResourceTest;
import org.dependencytrack.model.*;
import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.jersey.servlet.ServletContainer;
import org.glassfish.jersey.test.DeploymentContext;
import org.glassfish.jersey.test.ServletDeploymentContext;
import org.junit.Assert;
import org.junit.Test;
import javax.json.JsonArray;
import javax.json.JsonObject;
import javax.ws.rs.core.Response;
import java.util.UUID;

public class VulnerabilityResourceTest extends ResourceTest {

    @Override
    protected DeploymentContext configureDeployment() {
        return ServletDeploymentContext.forServlet(new ServletContainer(
                new ResourceConfig(VulnerabilityResource.class)
                        .register(AuthenticationFilter.class)))
                .build();
    }

    @Test
    public void getVulnerabilitiesByComponentUuidTest() {
        SampleData sampleData = new SampleData();
        Response response = target(V1_VULNERABILITY + "/component/" + sampleData.c1.getUuid().toString()).request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(200, response.getStatus(), 0);
        Assert.assertEquals(String.valueOf(2), response.getHeaderString(TOTAL_COUNT_HEADER));
        JsonArray json = parseJsonArray(response);
        Assert.assertNotNull(json);
        Assert.assertEquals(2, json.size());
        Assert.assertEquals("INT-1", json.getJsonObject(0).getString("vulnId"));
        Assert.assertEquals("INTERNAL", json.getJsonObject(0).getString("source"));
        Assert.assertEquals("Description 1", json.getJsonObject(0).getString("description"));
        Assert.assertEquals("CRITICAL", json.getJsonObject(0).getString("severity"));
        Assert.assertTrue(UuidUtil.isValidUUID(json.getJsonObject(0).getString("uuid")));
        Assert.assertEquals("INT-2", json.getJsonObject(1).getString("vulnId"));
        Assert.assertEquals("INTERNAL", json.getJsonObject(1).getString("source"));
        Assert.assertEquals("Description 2", json.getJsonObject(1).getString("description"));
        Assert.assertEquals("HIGH", json.getJsonObject(1).getString("severity"));
        Assert.assertTrue(UuidUtil.isValidUUID(json.getJsonObject(1).getString("uuid")));
    }

    @Test
    public void getVulnerabilitiesByComponentMd5Test() {
        SampleData sampleData = new SampleData();
        Response response = target(V1_VULNERABILITY + "/component/" + sampleData.c1.getMd5()).request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(200, response.getStatus(), 0);
        Assert.assertEquals(String.valueOf(2), response.getHeaderString(TOTAL_COUNT_HEADER));
        JsonArray json = parseJsonArray(response);
        Assert.assertNotNull(json);
        Assert.assertEquals(2, json.size());
        Assert.assertEquals("INT-1", json.getJsonObject(0).getString("vulnId"));
        Assert.assertEquals("INTERNAL", json.getJsonObject(0).getString("source"));
        Assert.assertEquals("Description 1", json.getJsonObject(0).getString("description"));
        Assert.assertEquals("CRITICAL", json.getJsonObject(0).getString("severity"));
        Assert.assertTrue(UuidUtil.isValidUUID(json.getJsonObject(0).getString("uuid")));
        Assert.assertEquals("INT-2", json.getJsonObject(1).getString("vulnId"));
        Assert.assertEquals("INTERNAL", json.getJsonObject(1).getString("source"));
        Assert.assertEquals("Description 2", json.getJsonObject(1).getString("description"));
        Assert.assertEquals("HIGH", json.getJsonObject(1).getString("severity"));
        Assert.assertTrue(UuidUtil.isValidUUID(json.getJsonObject(1).getString("uuid")));
    }

    @Test
    public void getVulnerabilitiesByComponentSha1Test() {
        SampleData sampleData = new SampleData();
        Response response = target(V1_VULNERABILITY + "/component/" + sampleData.c1.getSha1()).request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(200, response.getStatus(), 0);
        Assert.assertEquals(String.valueOf(2), response.getHeaderString(TOTAL_COUNT_HEADER));
        JsonArray json = parseJsonArray(response);
        Assert.assertNotNull(json);
        Assert.assertEquals(2, json.size());
        Assert.assertEquals("INT-1", json.getJsonObject(0).getString("vulnId"));
        Assert.assertEquals("INTERNAL", json.getJsonObject(0).getString("source"));
        Assert.assertEquals("Description 1", json.getJsonObject(0).getString("description"));
        Assert.assertEquals("CRITICAL", json.getJsonObject(0).getString("severity"));
        Assert.assertTrue(UuidUtil.isValidUUID(json.getJsonObject(0).getString("uuid")));
        Assert.assertEquals("INT-2", json.getJsonObject(1).getString("vulnId"));
        Assert.assertEquals("INTERNAL", json.getJsonObject(1).getString("source"));
        Assert.assertEquals("Description 2", json.getJsonObject(1).getString("description"));
        Assert.assertEquals("HIGH", json.getJsonObject(1).getString("severity"));
        Assert.assertTrue(UuidUtil.isValidUUID(json.getJsonObject(1).getString("uuid")));
    }

    @Test
    public void getVulnerabilitiesByComponentInvalidTest() {
        new SampleData();
        Response response = target(V1_VULNERABILITY + "/component/" + "jklfdjklfjaklfla").request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(404, response.getStatus(), 0);
        Assert.assertNull(response.getHeaderString(TOTAL_COUNT_HEADER));
        String body = getPlainTextBody(response);
        Assert.assertEquals("The component could not be found.", body);
    }

    @Test
    public void getVulnerabilitiesByComponentUuidIncludeSuppressedTest() {
        SampleData sampleData = new SampleData();
        Response response = target(V1_VULNERABILITY + "/component/" + sampleData.c1.getUuid().toString())
                .queryParam("suppressed", "true")
                .request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(200, response.getStatus(), 0);
        Assert.assertEquals(String.valueOf(3), response.getHeaderString(TOTAL_COUNT_HEADER));
        JsonArray json = parseJsonArray(response);
        Assert.assertNotNull(json);
        Assert.assertEquals(3, json.size());
        Assert.assertEquals("INT-1", json.getJsonObject(0).getString("vulnId"));
        Assert.assertEquals("INTERNAL", json.getJsonObject(0).getString("source"));
        Assert.assertEquals("Description 1", json.getJsonObject(0).getString("description"));
        Assert.assertEquals("CRITICAL", json.getJsonObject(0).getString("severity"));
        Assert.assertTrue(UuidUtil.isValidUUID(json.getJsonObject(0).getString("uuid")));
        Assert.assertEquals("INT-2", json.getJsonObject(1).getString("vulnId"));
        Assert.assertEquals("INTERNAL", json.getJsonObject(1).getString("source"));
        Assert.assertEquals("Description 2", json.getJsonObject(1).getString("description"));
        Assert.assertEquals("HIGH", json.getJsonObject(1).getString("severity"));
        Assert.assertTrue(UuidUtil.isValidUUID(json.getJsonObject(1).getString("uuid")));
        Assert.assertEquals("INT-3", json.getJsonObject(2).getString("vulnId"));
        Assert.assertEquals("INTERNAL", json.getJsonObject(2).getString("source"));
        Assert.assertEquals("Description 3", json.getJsonObject(2).getString("description"));
        Assert.assertEquals("MEDIUM", json.getJsonObject(2).getString("severity"));
        Assert.assertTrue(UuidUtil.isValidUUID(json.getJsonObject(2).getString("uuid")));
    }

    @Test
    public void getVulnerabilitiesByProjectTest() {
        SampleData sampleData = new SampleData();
        Response response = target(V1_VULNERABILITY + "/project/" + sampleData.p1.getUuid().toString()).request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(200, response.getStatus(), 0);
        Assert.assertEquals(String.valueOf(4), response.getHeaderString(TOTAL_COUNT_HEADER));
        JsonArray json = parseJsonArray(response);
        Assert.assertNotNull(json);
        Assert.assertEquals(4, json.size());
        Assert.assertEquals("INT-1", json.getJsonObject(0).getString("vulnId"));
        Assert.assertEquals("INTERNAL", json.getJsonObject(0).getString("source"));
        Assert.assertEquals("Description 1", json.getJsonObject(0).getString("description"));
        Assert.assertEquals("CRITICAL", json.getJsonObject(0).getString("severity"));
        Assert.assertTrue(UuidUtil.isValidUUID(json.getJsonObject(0).getString("uuid")));
        Assert.assertEquals("INT-2", json.getJsonObject(1).getString("vulnId"));
        Assert.assertEquals("INTERNAL", json.getJsonObject(1).getString("source"));
        Assert.assertEquals("Description 2", json.getJsonObject(1).getString("description"));
        Assert.assertEquals("HIGH", json.getJsonObject(1).getString("severity"));
        Assert.assertTrue(UuidUtil.isValidUUID(json.getJsonObject(1).getString("uuid")));
        Assert.assertEquals("INT-4", json.getJsonObject(2).getString("vulnId"));
        Assert.assertEquals("INTERNAL", json.getJsonObject(2).getString("source"));
        Assert.assertEquals("Description 4", json.getJsonObject(2).getString("description"));
        Assert.assertEquals("LOW", json.getJsonObject(2).getString("severity"));
        Assert.assertTrue(UuidUtil.isValidUUID(json.getJsonObject(2).getString("uuid")));
        Assert.assertEquals("INT-5", json.getJsonObject(3).getString("vulnId"));
        Assert.assertEquals("INTERNAL", json.getJsonObject(3).getString("source"));
        Assert.assertEquals("Description 5", json.getJsonObject(3).getString("description"));
        Assert.assertEquals("CRITICAL", json.getJsonObject(3).getString("severity"));
        Assert.assertTrue(UuidUtil.isValidUUID(json.getJsonObject(3).getString("uuid")));
    }

    @Test
    public void getVulnerabilitiesByProjectIncludeGlobalSuppressedTest() {
        SampleData sampleData = new SampleData();
        Response response = target(V1_VULNERABILITY + "/project/" + sampleData.p1.getUuid().toString())
                .queryParam("suppressed", "true")
                .request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(200, response.getStatus(), 0);
        //Assert.assertEquals(String.valueOf(4), response.getHeaderString(TOTAL_COUNT_HEADER));
        JsonArray json = parseJsonArray(response);
        Assert.assertNotNull(json);
        Assert.assertEquals(5, json.size());
        Assert.assertEquals("INT-1", json.getJsonObject(0).getString("vulnId"));
        Assert.assertEquals("INT-2", json.getJsonObject(1).getString("vulnId"));
        Assert.assertEquals("INT-3", json.getJsonObject(2).getString("vulnId"));
        Assert.assertEquals("INT-4", json.getJsonObject(3).getString("vulnId"));
        Assert.assertEquals("INT-5", json.getJsonObject(4).getString("vulnId"));
    }

    @Test
    public void getVulnerabilitiesByProjectIncludeProjectSuppressedTest() {
        SampleData sampleData = new SampleData();
        Response response = target(V1_VULNERABILITY + "/project/" + sampleData.p2.getUuid().toString())
                .queryParam("suppressed", "true")
                .request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(200, response.getStatus(), 0);
        Assert.assertEquals(String.valueOf(2), response.getHeaderString(TOTAL_COUNT_HEADER));
        JsonArray json = parseJsonArray(response);
        Assert.assertNotNull(json);
        Assert.assertEquals(2, json.size());
        Assert.assertEquals("INT-4", json.getJsonObject(0).getString("vulnId"));
        Assert.assertEquals("INT-5", json.getJsonObject(1).getString("vulnId"));
    }

    @Test
    public void getVulnerabilitiesByProjectInvalidTest() {
        new SampleData();
        Response response = target(V1_VULNERABILITY + "/project/" + UUID.randomUUID().toString()).request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(404, response.getStatus(), 0);
        Assert.assertNull(response.getHeaderString(TOTAL_COUNT_HEADER));
        String body = getPlainTextBody(response);
        Assert.assertEquals("The project could not be found.", body);
    }

    @Test
    public void getVulnerabilityByUuidTest() {
        SampleData sampleData = new SampleData();
        Response response = target(V1_VULNERABILITY + "/" + sampleData.v1.getUuid().toString()).request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(200, response.getStatus(), 0);
        Assert.assertNull(response.getHeaderString(TOTAL_COUNT_HEADER));
        JsonObject json = parseJsonObject(response);
        Assert.assertNotNull(json);
        Assert.assertEquals("INT-1", json.getString("vulnId"));
    }

    @Test
    public void getVulnerabilityByUuidInvalidTest() {
        new SampleData();
        Response response = target(V1_VULNERABILITY + "/" + UUID.randomUUID().toString()).request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(404, response.getStatus(), 0);
        Assert.assertNull(response.getHeaderString(TOTAL_COUNT_HEADER));
        String body = getPlainTextBody(response);
        Assert.assertEquals("The vulnerability could not be found.", body);
    }

    @Test
    public void getVulnerabilityByVulnIdTest() {
        SampleData sampleData = new SampleData();
        Response response = target(V1_VULNERABILITY + "/source/" + sampleData.v1.getSource() + "/vuln/" + sampleData.v1.getVulnId()).request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(200, response.getStatus(), 0);
        Assert.assertNull(response.getHeaderString(TOTAL_COUNT_HEADER));
        JsonObject json = parseJsonObject(response);
        Assert.assertNotNull(json);
        Assert.assertEquals("INT-1", json.getString("vulnId"));
    }

    @Test
    public void getVulnerabilityByVulnIdInvalidTest() {
        new SampleData();
        Response response = target(V1_VULNERABILITY + "/source/INTERNAL/vuln/blah").request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(404, response.getStatus(), 0);
        Assert.assertNull(response.getHeaderString(TOTAL_COUNT_HEADER));
        String body = getPlainTextBody(response);
        Assert.assertEquals("The vulnerability could not be found.", body);
    }

    @Test
    public void getAffectedProjectTest() {
        SampleData sampleData = new SampleData();
        Response response = target(V1_VULNERABILITY + "/source/" + sampleData.v1.getSource() + "/vuln/" + sampleData.v1.getVulnId() + "/projects").request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(200, response.getStatus(), 0);
        Assert.assertEquals(String.valueOf(1), response.getHeaderString(TOTAL_COUNT_HEADER));
        JsonArray json = parseJsonArray(response);
        Assert.assertNotNull(json);
        Assert.assertEquals("Project 1", json.getJsonObject(0).getString("name"));
        Assert.assertEquals(sampleData.p1.getUuid().toString(), json.getJsonObject(0).getString("uuid"));
    }

    @Test
    public void getAffectedProjectInvalidTest() {
        SampleData sampleData = new SampleData();
        Response response = target(V1_VULNERABILITY + "/source/INTERNAL/vuln/blah/projects").request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(404, response.getStatus(), 0);
        Assert.assertNull(response.getHeaderString(TOTAL_COUNT_HEADER));
        String body = getPlainTextBody(response);
        Assert.assertEquals("The vulnerability could not be found.", body);
    }

    @Test
    public void getAllVulnerabilitiesTest() {
        new SampleData();
        Response response = target(V1_VULNERABILITY).request()
                .header(X_API_KEY, apiKey)
                .get(Response.class);
        Assert.assertEquals(200, response.getStatus(), 0);
        Assert.assertEquals(String.valueOf(5), response.getHeaderString(TOTAL_COUNT_HEADER));
        JsonArray json = parseJsonArray(response);
        Assert.assertNotNull(json);
        Assert.assertEquals(5, json.size());
        Assert.assertEquals("INT-1", json.getJsonObject(0).getString("vulnId"));
        Assert.assertEquals("INT-2", json.getJsonObject(1).getString("vulnId"));
        Assert.assertEquals("INT-3", json.getJsonObject(2).getString("vulnId"));
        Assert.assertEquals("INT-4", json.getJsonObject(3).getString("vulnId"));
        Assert.assertEquals("INT-5", json.getJsonObject(4).getString("vulnId"));
    }

    private class SampleData {
        final Project p1;
        final Project p2;
        final Component c1;
        final Component c2;
        final Vulnerability v1;
        final Vulnerability v2;
        final Vulnerability v3;
        final Vulnerability v4;
        final Vulnerability v5;

        SampleData() {
            c1 = new Component();
            c1.setName("Component 1");
            c1.setMd5("2AAF520D1F19AECF246A0995D91E93A5");
            c1.setSha1("3D5A54669CF8D4ED55B7DF5751FA18C3F72F0CFB");
            c1.setSha256("47602D7DFE910AD941FEA52E85E6E3F1C175434B0E6E261C31C766FE4C078A25");
            c2 = new Component();
            c2.setName("Component 2");
            c1.setMd5("5EABD62FA03D159A96C77E6EEB6C7027");
            c1.setSha1("108BCF94A1C0E0F915B935C97F6BB9E50FB7C246");
            c1.setSha256("418716B003FE0268B6521EF7ACBED13F5BA491D593896D5DEB2058C42D87002D");
            qm.createComponent(c1, false);
            qm.createComponent(c2, false);

            v1 = new Vulnerability();
            v1.setVulnId("INT-1");
            v1.setSource(Vulnerability.Source.INTERNAL);
            v1.setSeverity(Severity.CRITICAL);
            v1.setDescription("Description 1");

            v2 = new Vulnerability();
            v2.setVulnId("INT-2");
            v2.setSource(Vulnerability.Source.INTERNAL);
            v2.setSeverity(Severity.HIGH);
            v2.setDescription("Description 2");

            v3 = new Vulnerability();
            v3.setVulnId("INT-3");
            v3.setSource(Vulnerability.Source.INTERNAL);
            v3.setSeverity(Severity.MEDIUM);
            v3.setDescription("Description 3");

            v4 = new Vulnerability();
            v4.setVulnId("INT-4");
            v4.setSource(Vulnerability.Source.INTERNAL);
            v4.setSeverity(Severity.LOW);
            v4.setDescription("Description 4");

            v5 = new Vulnerability();
            v5.setVulnId("INT-5");
            v5.setSource(Vulnerability.Source.INTERNAL);
            v5.setSeverity(Severity.CRITICAL);
            v5.setDescription("Description 5");

            qm.createVulnerability(v1, false);
            qm.createVulnerability(v2, false);
            qm.createVulnerability(v3, false);
            qm.createVulnerability(v4, false);
            qm.createVulnerability(v5, false);
            qm.addVulnerability(v1, c1);
            qm.addVulnerability(v2, c1);
            qm.addVulnerability(v3, c1);
            qm.addVulnerability(v4, c2);
            qm.addVulnerability(v5, c2);

            p1 = qm.createProject("Project 1", null, null, null, null, null, false);
            p2 = qm.createProject("Project 2", null, null, null, null, null, false);

            qm.createDependencyIfNotExist(p1, c1, null, null);
            qm.createDependencyIfNotExist(p1, c2, null, null);
            qm.createDependencyIfNotExist(p2, c2, null, null);

            qm.makeAnalysis(null, c1, v3, AnalysisState.FALSE_POSITIVE, true);
            qm.makeAnalysis(p2, c2, v5, AnalysisState.NOT_AFFECTED, true);
        }
    }
}